package com.wiatt.engine.database.greenDao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wiatt.engine.database.entity.OwnerDb;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "OWNER_DB".
*/
public class OwnerDbDao extends AbstractDao<OwnerDb, Long> {

    public static final String TABLENAME = "OWNER_DB";

    /**
     * Properties of entity OwnerDb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IdReal = new Property(1, Integer.class, "idReal", false, "ID_REAL");
        public final static Property Login = new Property(2, String.class, "login", false, "LOGIN");
        public final static Property Node_id = new Property(3, String.class, "node_id", false, "NODE_ID");
        public final static Property Html_url = new Property(4, String.class, "html_url", false, "HTML_URL");
        public final static Property Subscriptions_url = new Property(5, String.class, "subscriptions_url", false, "SUBSCRIPTIONS_URL");
        public final static Property Repos_url = new Property(6, String.class, "repos_url", false, "REPOS_URL");
        public final static Property Type = new Property(7, String.class, "type", false, "TYPE");
        public final static Property Name = new Property(8, String.class, "name", false, "NAME");
        public final static Property Company = new Property(9, String.class, "company", false, "COMPANY");
        public final static Property Location = new Property(10, String.class, "location", false, "LOCATION");
        public final static Property Public_repos = new Property(11, Integer.class, "public_repos", false, "PUBLIC_REPOS");
    }

    private DaoSession daoSession;


    public OwnerDbDao(DaoConfig config) {
        super(config);
    }
    
    public OwnerDbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"OWNER_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ID_REAL\" INTEGER," + // 1: idReal
                "\"LOGIN\" TEXT," + // 2: login
                "\"NODE_ID\" TEXT NOT NULL UNIQUE ," + // 3: node_id
                "\"HTML_URL\" TEXT," + // 4: html_url
                "\"SUBSCRIPTIONS_URL\" TEXT," + // 5: subscriptions_url
                "\"REPOS_URL\" TEXT," + // 6: repos_url
                "\"TYPE\" TEXT," + // 7: type
                "\"NAME\" TEXT," + // 8: name
                "\"COMPANY\" TEXT," + // 9: company
                "\"LOCATION\" TEXT," + // 10: location
                "\"PUBLIC_REPOS\" INTEGER);"); // 11: public_repos
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_OWNER_DB_ID_REAL ON \"OWNER_DB\"" +
                " (\"ID_REAL\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OWNER_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OwnerDb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer idReal = entity.getIdReal();
        if (idReal != null) {
            stmt.bindLong(2, idReal);
        }
 
        String login = entity.getLogin();
        if (login != null) {
            stmt.bindString(3, login);
        }
        stmt.bindString(4, entity.getNode_id());
 
        String html_url = entity.getHtml_url();
        if (html_url != null) {
            stmt.bindString(5, html_url);
        }
 
        String subscriptions_url = entity.getSubscriptions_url();
        if (subscriptions_url != null) {
            stmt.bindString(6, subscriptions_url);
        }
 
        String repos_url = entity.getRepos_url();
        if (repos_url != null) {
            stmt.bindString(7, repos_url);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(8, type);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(9, name);
        }
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(10, company);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(11, location);
        }
 
        Integer public_repos = entity.getPublic_repos();
        if (public_repos != null) {
            stmt.bindLong(12, public_repos);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OwnerDb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer idReal = entity.getIdReal();
        if (idReal != null) {
            stmt.bindLong(2, idReal);
        }
 
        String login = entity.getLogin();
        if (login != null) {
            stmt.bindString(3, login);
        }
        stmt.bindString(4, entity.getNode_id());
 
        String html_url = entity.getHtml_url();
        if (html_url != null) {
            stmt.bindString(5, html_url);
        }
 
        String subscriptions_url = entity.getSubscriptions_url();
        if (subscriptions_url != null) {
            stmt.bindString(6, subscriptions_url);
        }
 
        String repos_url = entity.getRepos_url();
        if (repos_url != null) {
            stmt.bindString(7, repos_url);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(8, type);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(9, name);
        }
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(10, company);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(11, location);
        }
 
        Integer public_repos = entity.getPublic_repos();
        if (public_repos != null) {
            stmt.bindLong(12, public_repos);
        }
    }

    @Override
    protected final void attachEntity(OwnerDb entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public OwnerDb readEntity(Cursor cursor, int offset) {
        OwnerDb entity = new OwnerDb( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // idReal
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // login
            cursor.getString(offset + 3), // node_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // html_url
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // subscriptions_url
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // repos_url
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // type
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // name
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // company
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // location
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11) // public_repos
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OwnerDb entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdReal(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setLogin(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNode_id(cursor.getString(offset + 3));
        entity.setHtml_url(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSubscriptions_url(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRepos_url(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCompany(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLocation(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPublic_repos(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(OwnerDb entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(OwnerDb entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(OwnerDb entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
