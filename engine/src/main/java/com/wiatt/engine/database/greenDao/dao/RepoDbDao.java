package com.wiatt.engine.database.greenDao.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.wiatt.engine.database.entity.LicenseDb;

import com.wiatt.engine.database.entity.RepoDb;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REPO_DB".
*/
public class RepoDbDao extends AbstractDao<RepoDb, Long> {

    public static final String TABLENAME = "REPO_DB";

    /**
     * Properties of entity RepoDb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IdReal = new Property(1, Integer.class, "idReal", false, "ID_REAL");
        public final static Property Node_id = new Property(2, String.class, "node_id", false, "NODE_ID");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Full_name = new Property(4, String.class, "full_name", false, "FULL_NAME");
        public final static Property OwnerId = new Property(5, Integer.class, "ownerId", false, "OWNER_ID");
        public final static Property LicenseId = new Property(6, Long.class, "LicenseId", false, "LICENSE_ID");
        public final static Property Html_url = new Property(7, String.class, "html_url", false, "HTML_URL");
        public final static Property Description = new Property(8, String.class, "description", false, "DESCRIPTION");
        public final static Property Events_url = new Property(9, String.class, "events_url", false, "EVENTS_URL");
        public final static Property Created_at = new Property(10, String.class, "created_at", false, "CREATED_AT");
        public final static Property Updated_at = new Property(11, String.class, "updated_at", false, "UPDATED_AT");
        public final static Property Pushed_at = new Property(12, String.class, "pushed_at", false, "PUSHED_AT");
        public final static Property Git_url = new Property(13, String.class, "git_url", false, "GIT_URL");
        public final static Property Ssh_url = new Property(14, String.class, "ssh_url", false, "SSH_URL");
        public final static Property Clone_url = new Property(15, String.class, "clone_url", false, "CLONE_URL");
        public final static Property Svn_url = new Property(16, String.class, "svn_url", false, "SVN_URL");
        public final static Property Stargazers_count = new Property(17, Integer.class, "stargazers_count", false, "STARGAZERS_COUNT");
        public final static Property Watchers_count = new Property(18, Integer.class, "watchers_count", false, "WATCHERS_COUNT");
        public final static Property Forks_count = new Property(19, Integer.class, "forks_count", false, "FORKS_COUNT");
        public final static Property Open_issues_count = new Property(20, Integer.class, "open_issues_count", false, "OPEN_ISSUES_COUNT");
    }

    private DaoSession daoSession;

    private Query<RepoDb> ownerDb_RepoDbsQuery;

    public RepoDbDao(DaoConfig config) {
        super(config);
    }
    
    public RepoDbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REPO_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ID_REAL\" INTEGER," + // 1: idReal
                "\"NODE_ID\" TEXT," + // 2: node_id
                "\"NAME\" TEXT," + // 3: name
                "\"FULL_NAME\" TEXT," + // 4: full_name
                "\"OWNER_ID\" INTEGER NOT NULL ," + // 5: ownerId
                "\"LICENSE_ID\" INTEGER," + // 6: LicenseId
                "\"HTML_URL\" TEXT," + // 7: html_url
                "\"DESCRIPTION\" TEXT," + // 8: description
                "\"EVENTS_URL\" TEXT," + // 9: events_url
                "\"CREATED_AT\" TEXT," + // 10: created_at
                "\"UPDATED_AT\" TEXT," + // 11: updated_at
                "\"PUSHED_AT\" TEXT," + // 12: pushed_at
                "\"GIT_URL\" TEXT," + // 13: git_url
                "\"SSH_URL\" TEXT," + // 14: ssh_url
                "\"CLONE_URL\" TEXT," + // 15: clone_url
                "\"SVN_URL\" TEXT," + // 16: svn_url
                "\"STARGAZERS_COUNT\" INTEGER," + // 17: stargazers_count
                "\"WATCHERS_COUNT\" INTEGER," + // 18: watchers_count
                "\"FORKS_COUNT\" INTEGER," + // 19: forks_count
                "\"OPEN_ISSUES_COUNT\" INTEGER);"); // 20: open_issues_count
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_REPO_DB_ID_REAL ON \"REPO_DB\"" +
                " (\"ID_REAL\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REPO_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RepoDb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer idReal = entity.getIdReal();
        if (idReal != null) {
            stmt.bindLong(2, idReal);
        }
 
        String node_id = entity.getNode_id();
        if (node_id != null) {
            stmt.bindString(3, node_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String full_name = entity.getFull_name();
        if (full_name != null) {
            stmt.bindString(5, full_name);
        }
        stmt.bindLong(6, entity.getOwnerId());
 
        Long LicenseId = entity.getLicenseId();
        if (LicenseId != null) {
            stmt.bindLong(7, LicenseId);
        }
 
        String html_url = entity.getHtml_url();
        if (html_url != null) {
            stmt.bindString(8, html_url);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(9, description);
        }
 
        String events_url = entity.getEvents_url();
        if (events_url != null) {
            stmt.bindString(10, events_url);
        }
 
        String created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindString(11, created_at);
        }
 
        String updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindString(12, updated_at);
        }
 
        String pushed_at = entity.getPushed_at();
        if (pushed_at != null) {
            stmt.bindString(13, pushed_at);
        }
 
        String git_url = entity.getGit_url();
        if (git_url != null) {
            stmt.bindString(14, git_url);
        }
 
        String ssh_url = entity.getSsh_url();
        if (ssh_url != null) {
            stmt.bindString(15, ssh_url);
        }
 
        String clone_url = entity.getClone_url();
        if (clone_url != null) {
            stmt.bindString(16, clone_url);
        }
 
        String svn_url = entity.getSvn_url();
        if (svn_url != null) {
            stmt.bindString(17, svn_url);
        }
 
        Integer stargazers_count = entity.getStargazers_count();
        if (stargazers_count != null) {
            stmt.bindLong(18, stargazers_count);
        }
 
        Integer watchers_count = entity.getWatchers_count();
        if (watchers_count != null) {
            stmt.bindLong(19, watchers_count);
        }
 
        Integer forks_count = entity.getForks_count();
        if (forks_count != null) {
            stmt.bindLong(20, forks_count);
        }
 
        Integer open_issues_count = entity.getOpen_issues_count();
        if (open_issues_count != null) {
            stmt.bindLong(21, open_issues_count);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RepoDb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer idReal = entity.getIdReal();
        if (idReal != null) {
            stmt.bindLong(2, idReal);
        }
 
        String node_id = entity.getNode_id();
        if (node_id != null) {
            stmt.bindString(3, node_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String full_name = entity.getFull_name();
        if (full_name != null) {
            stmt.bindString(5, full_name);
        }
        stmt.bindLong(6, entity.getOwnerId());
 
        Long LicenseId = entity.getLicenseId();
        if (LicenseId != null) {
            stmt.bindLong(7, LicenseId);
        }
 
        String html_url = entity.getHtml_url();
        if (html_url != null) {
            stmt.bindString(8, html_url);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(9, description);
        }
 
        String events_url = entity.getEvents_url();
        if (events_url != null) {
            stmt.bindString(10, events_url);
        }
 
        String created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindString(11, created_at);
        }
 
        String updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindString(12, updated_at);
        }
 
        String pushed_at = entity.getPushed_at();
        if (pushed_at != null) {
            stmt.bindString(13, pushed_at);
        }
 
        String git_url = entity.getGit_url();
        if (git_url != null) {
            stmt.bindString(14, git_url);
        }
 
        String ssh_url = entity.getSsh_url();
        if (ssh_url != null) {
            stmt.bindString(15, ssh_url);
        }
 
        String clone_url = entity.getClone_url();
        if (clone_url != null) {
            stmt.bindString(16, clone_url);
        }
 
        String svn_url = entity.getSvn_url();
        if (svn_url != null) {
            stmt.bindString(17, svn_url);
        }
 
        Integer stargazers_count = entity.getStargazers_count();
        if (stargazers_count != null) {
            stmt.bindLong(18, stargazers_count);
        }
 
        Integer watchers_count = entity.getWatchers_count();
        if (watchers_count != null) {
            stmt.bindLong(19, watchers_count);
        }
 
        Integer forks_count = entity.getForks_count();
        if (forks_count != null) {
            stmt.bindLong(20, forks_count);
        }
 
        Integer open_issues_count = entity.getOpen_issues_count();
        if (open_issues_count != null) {
            stmt.bindLong(21, open_issues_count);
        }
    }

    @Override
    protected final void attachEntity(RepoDb entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RepoDb readEntity(Cursor cursor, int offset) {
        RepoDb entity = new RepoDb( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // idReal
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // node_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // full_name
            cursor.getInt(offset + 5), // ownerId
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // LicenseId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // html_url
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // description
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // events_url
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // created_at
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // updated_at
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // pushed_at
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // git_url
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // ssh_url
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // clone_url
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // svn_url
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // stargazers_count
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // watchers_count
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // forks_count
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20) // open_issues_count
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RepoDb entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdReal(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setNode_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFull_name(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOwnerId(cursor.getInt(offset + 5));
        entity.setLicenseId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setHtml_url(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDescription(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setEvents_url(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCreated_at(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUpdated_at(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPushed_at(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setGit_url(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSsh_url(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setClone_url(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setSvn_url(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setStargazers_count(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setWatchers_count(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setForks_count(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setOpen_issues_count(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RepoDb entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RepoDb entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RepoDb entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "repoDbs" to-many relationship of OwnerDb. */
    public List<RepoDb> _queryOwnerDb_RepoDbs(Integer ownerId) {
        synchronized (this) {
            if (ownerDb_RepoDbsQuery == null) {
                QueryBuilder<RepoDb> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.OwnerId.eq(null));
                ownerDb_RepoDbsQuery = queryBuilder.build();
            }
        }
        Query<RepoDb> query = ownerDb_RepoDbsQuery.forCurrentThread();
        query.setParameter(0, ownerId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getLicenseDbDao().getAllColumns());
            builder.append(" FROM REPO_DB T");
            builder.append(" LEFT JOIN LICENSE_DB T0 ON T.\"LICENSE_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected RepoDb loadCurrentDeep(Cursor cursor, boolean lock) {
        RepoDb entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        LicenseDb license = loadCurrentOther(daoSession.getLicenseDbDao(), cursor, offset);
        entity.setLicense(license);

        return entity;    
    }

    public RepoDb loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<RepoDb> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<RepoDb> list = new ArrayList<RepoDb>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<RepoDb> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<RepoDb> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
